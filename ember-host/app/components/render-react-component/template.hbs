{{!-- 
  Template for RenderReactComponent
  
  This template provides:
  1. A div with the specified ID where React will mount
  2. Loading state while fetching the remote entry
  3. Error state if something goes wrong
  4. Lifecycle hooks for mounting/unmounting
--}}

<div class="react-component-wrapper" {{did-insert this.didInsert}} {{will-destroy this.willDestroy}}>
  {{!-- Always render the mount point, overlay loading/error states --}}
  <div id={{@domElementSelectorId}} class="react-mount-point"></div>
  
  {{#if this.isLoading}}
    <div class="loading-overlay">
      <div class="spinner"></div>
      <p>Loading {{@componentName}}...</p>
    </div>
  {{/if}}
  
  {{#if this.error}}
    <div class="error-overlay">
      <p class="error-message">Failed to load {{@componentName}}</p>
      <p class="error-details">{{this.error.message}}</p>
      <button type="button" {{on "click" this.loadReactComponent}}>Retry</button>
    </div>
  {{/if}}
</div>

{{!--
LEARNING NOTES:

1. Handlebars Syntax:
   - {{#if condition}} ... {{else}} ... {{/if}} - Conditional rendering
   - {{@propName}} - Access component arguments (props)
   - {{this.propertyName}} - Access component properties
   - {{on "event" this.action}} - Event handlers

2. Modifiers:
   - {{did-insert this.didInsert}} - Runs when element is inserted into DOM
   - {{will-destroy this.willDestroy}} - Runs before element is removed
   - These are Ember modifiers for lifecycle management

3. The React Mount Point:
   - <div id={{@domElementSelectorId}}> is where React renders
   - Must have a unique ID for each React component instance
   - React uses ReactDOM.createRoot(element) to mount here

4. Loading States:
   - Good UX practice to show loading/error states
   - Prevents layout shift when React loads
   - Gives users feedback

5. Why Not Use Ember's {{component}} Helper?
   - We're not rendering an Ember component
   - We're mounting a React component into a DOM element
   - This is "framework-agnostic" integration
--}}

<style>
  .react-component-wrapper {
    min-height: 100px;
    position: relative;
  }

  .react-mount-point {
    width: 100%;
    min-height: 100px;
  }

  .loading-overlay,
  .error-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    text-align: center;
    background-color: rgba(255, 255, 255, 0.95);
    z-index: 1000;
  }

  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .error-overlay {
    color: #e74c3c;
    background-color: rgba(254, 242, 242, 0.98);
  }

  .error-message {
    font-weight: bold;
    margin-bottom: 0.5rem;
  }

  .error-details {
    font-size: 0.9em;
    color: #666;
    margin-bottom: 1rem;
  }

  .error-overlay button {
    padding: 0.5rem 1rem;
    background-color: #3498db;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .error-overlay button:hover {
    background-color: #2980b9;
  }
</style>

